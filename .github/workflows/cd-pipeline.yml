name: CD Pipeline

on:
    workflow_run:
        workflows: ["CI Pipeline"]
        types:
            - completed
jobs:
    artifact:
        runs-on: ubuntu-latest
        outputs:
          docker_image_name: ${{ steps.load-image-name.outputs.image_name }}
        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            - name: Download Docker image name artifact
              uses: actions/download-artifact@v3
              with:
                name: docker-image-name

            - name: List files after downloading artifact
              run: ls -la
  
            - name: Print the content of image_name.txt
              run: cat image_name.txt

            - name: Load Docker image name
              id: load-image-name
              run: |
                IMAGE_NAME=$(cat image_name.txt)
                echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
    deploy:
        runs-on: ubuntu-latest
        needs: artifact
      
        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            - name: Setup Terraform
              uses: hashicorp/setup-terraform@v2

            - name: Terraform Init
              run: terraform init
              working-directory: terraform

            - name: Terraform Apply
              run: terraform apply -auto-approve
              working-directory: terraform
              env:
                AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
                AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                TF_VAR_docker_image: ${{ env.IMAGE_NAME }}
                TF_VAR_openweather_api_key: ${{ secrets.OPENWEATHER_API_KEY }}

            - name: Post Apply - Output ALB DNS Name
              run: terraform output -raw alb_dns_name
              working-directory: terraform
              id: alb_dns_output

            - name: Display the application URL
              run: echo "Application is deployed at http://$(terraform output -raw alb_dns_name)"
